name: Build Docker Image

inputs:
  context:
    description: 'the set of files located in the specified PATH or URL'
    required: true
    type: string
  tags:
    description: 'the set of tags to apply to the image (List/CSV)'
    required: true
    type: string
  push:
    description: 'shorthand for --output=type=registry'
    required: true
    type: boolean
    default: false
  build-args:
    description: 'build-time variables (List)'
    required: false
    type: string
  platforms:
    description: 'target platforms for build (List/CSV)'
    required: false
    type: string
  test-entrypoint:
    description: 'ENTRYPOINT used while testing for the local built image'
    required: false
    type: string
  test-cmd:
    description: 'CMD used while testing for the local built image'
    required: false
    type: string
  username:
    description: 'username for docker registry'
    required: true
    type: string
  password:
    description: 'password for docker registry'
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - uses: docker/setup-qemu-action@v3
    - uses: docker/login-action@v3
      with:
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - uses: docker/setup-buildx-action@v3
    - uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        build-args: ${{ inputs.build-args }}
        load: true
        push: false
        tags: test:latest,${{ inputs.tags }}
    - name: Test Build Image
      run: |
        if [ -n "${{ inputs.test-entrypoint }}" ] || [ -n "${{ inputs.test-cmd }}" ]; then
          DOCKER_TEST="docker run -t"
          [ -n "${{ inputs.test-entrypoint }}" ] && DOCKER_TEST="${DOCKER_TEST} --entrypoint=${{ inputs.test-entrypoint }}"
          DOCKER_TEST="${DOCKER_TEST} test:latest"
          [ -n "${{ inputs.test-cmd }}" ] && DOCKER_TEST="${DOCKER_TEST} ${{ inputs.test-cmd }}"
          echo ${DOCKER_TEST} > /tmp/DOCKER_TEST.sh
          /bin/bash /tmp/DOCKER_TEST.sh
        else
          echo "SKIP testing..."
        fi
      shell: bash
    - name: Build and Push Image
      uses: docker/build-push-action@v6
      if: ${{ inputs.push == 'true' }}
      with:
        context: ${{ inputs.context }}
        platforms: ${{ inputs.platforms }}
        build-args: ${{ inputs.build-args }}
        tags: ${{ inputs.tags }}
        push: true
